{
  "swagger": "2.0",
  "info": {
    "title": "Authentication API",
    "version": "1.0.0",
    "description": "## API of the Authentication Service\n\nThis specification describes the endpoints, request/response model of the Authentication API. This API provides REST resources to authenticate and authorize users of Video Hoster.\n\nThe resources should only be used over HTTPS (SSL) and can be accessed via the following base URL: https://videohoster.io/api/v1/\n## API usage guidelines\n\nThis section describes general rules and guidelines for using REST based services offered by Video Hoster.\n  * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.\n  * Video Hoster reserves the right to add new parameters without further notice (in request and response).\n  * Video Hoster reserves the right to add new error codes without further notice. Video Hoster will thereby stick to the HTTP STATUS CODES as defined by W3C.\n  * Video Hoster reserves the right to enhance enumerations by new values.\n  * Video Hoster reserves the right to increase the \"maxItem\" settings of arrays without further notice.\n  \nEach consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))\n\n## Business definitions\nA user who is trying to login is a registered user whose authentication has to be validated before authorizing them with the right access. Once authenticated and authorized successfully, an access token in JWT standard is generated by the backend system containing following information of the logged in user:\n  * header - meta information of generated access token\n  * payload - claims information of authenticated user\n  * signature - digital signature to verify that the token is not tampered along the way\n\nRead https://jwt.io/introduction/ for more information on JWT standard.\n## Release Notes\n### 1.0.0\n* Initial version\n"
  },
  "host": "videohoster.io",
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1/auth",
  "tags": [
    {
      "name": "API#001 Authentication",
      "description": "All operations marked with 'API#001 Authentication' are relevant to user authentication use case"
    }
  ],
  "securityDefinitions": {
    "BasicAuthorization": {
      "type": "basic",
      "description": "HTTP Basic Authentication is used for authentication. The server authentication credentials should be sent in the Authorization header.\nBasic authentication should only be used over HTTPS (SSL).\n\nThe Authorization header is constructed as follows:\n\n- The username and password are combined into a string separated by a colon, e.g.: username:password\n- The resulting string is encoded using the RFC2045-MIME variant of Base64, except not limited to 76 char/line.\n- The authorization method and a space i.e. \"Basic \" is then put before the encoded string.\n\n```\nPOST https://proman.io/api/v1/authentication HTTP/1.1\nAuthorization: Basic YW5kcmFwcF91czpqVEdhNUVKODR0\n```\n"
    },
    "BearerAuthorization": {
      "type": "basic",
      "description": "Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.”\nThe bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources:\n``` Authorization: Bearer <token>\n```\nSimilarly to Basic authentication, Bearer authentication should only be used over HTTPS (SSL).\nRead https://jwt.io/introduction/ for more information on JWT standard.\n"
    }
  },
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "operationId": "login",
        "security": [
          {
            "BasicAuthorization": []
          }
        ],
        "summary": "Authenticate and Authorize User",
        "description": "Each user logs into Video Hoster application using their email address as username and password as credentials.\n",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK - Authenticated successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "access-token": {
                "type": "string",
                "description": "Generated access token (JWT) of successfully authenticated user"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthorizedUserResponse"
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "API#001 Authentication"
        ],
        "operationId": "logout",
        "security": [
          {
            "BearerAuthorization": []
          }
        ],
        "summary": "Logout the currently logged in user",
        "description": "Invalidate the current authenticated token\n",
        "parameters": [
          {
            "$ref": "#/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Logged out successfully",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              },
              "access-token": {
                "type": "string",
                "description": "Generated access token (JWT) of successfully authenticated user"
              }
            }
          },
          "400": {
            "description": "BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, mandatory elements are missing)",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "401": {
            "description": "UNAUTHORIZED - user has provided wrong credentials",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "403": {
            "description": "FORBIDDEN - request has not been applied because client application has no permission to perform action",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          },
          "500": {
            "description": "INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.",
            "headers": {
              "request-id": {
                "type": "string",
                "description": "Used as correlation id while tracing for the request in the backend"
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "Authorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in Base64 encoded format. Refer to the #/components/securitySchemes for more information on this header."
    },
    "BearerAuthorization": {
      "name": "authorization",
      "type": "string",
      "in": "header",
      "required": true,
      "description": "Mandatory user credentials in bearer http authentication scheme format. Refer to the #/components/securitySchemes for more information on this header."
    }
  },
  "definitions": {
    "AuthorizedUserResponse": {
      "description": "Object, which describes the successfully authenticated user details",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Unique identifier of the authorized user in a standard UUID format"
        },
        "first_name": {
          "type": "string",
          "description": "first name of user"
        },
        "last_name": {
          "type": "string",
          "description": "last name of user"
        },
        "email_address": {
          "type": "string",
          "description": "email address of member"
        },
        "mobile_phone": {
          "type": "string",
          "description": "mobile phone number of user"
        },
        "last_login_time": {
          "description": "The last login time of authorized user (time in milliseconds)",
          "type": "object"
        },
        "role": {
          "type" : "string"
        }
      },
      "required": [
        "id",
        "first_name",
        "last_name",
        "email_address",
        "mobile_phone",
        "last_login_time",
        "role"
      ],
      "example": {
        "id": "7d174a25-ba31-45a8-85b4-b06ffc9d5f8f",
        "first_name": "Abhi",
        "last_name": "Mahajan",
        "email_address": "abhimahajan259@gmail.com",
        "mobile_number": "7508740564",
        "role": "nonadmin"
      }
    },

    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Application specific standard error code"
        },
        "message": {
          "type": "string",
          "description": "Error message stating the reason"
        },
        "root_cause": {
          "type": "string",
          "description": "Root cause of the Error"
        }
      },
      "required": [
        "code",
        "message"
      ],
      "example": {
        "code": "USR-001",
        "message": "Email address already exist"
      }
    }
  }
}